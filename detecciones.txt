import os
from ultralytics import YOLO
from collections import defaultdict

# Cargar modelo YOLOv8 entrenado con VisDrone
model = YOLO('citylab_50epochs.pt')

# Clases a detectar (según el dataset VisDrone)
clases_a_detectar = [0, 3, 8, 9]  # 0 = pedestrian, 3 = car, 8 = bus, 9 = motor

# Inicialización de variables
objetos_unicos = set()
contador_clases = defaultdict(int)
frame_counts = defaultdict(lambda: defaultdict(int))  # Almacena conteo por frame
procesamiento_tiempos = {}  # Almacena tiempos de procesamiento por frame

# Archivo de salida
output_file = "detecciones_mejorado.txt"
if os.path.exists(output_file):
    os.remove(output_file)  # Eliminar si ya existe para no duplicar datos

with open(output_file, "w") as f:
    f.write("Frame | ID_Tracking | Clase | Confianza | Coordenadas (x,y,w,h)\n")
    f.write("-" * 80 + "\n")

    results = model.track(
        source="Prueba1.mp4",
        conf=0.4,
        iou=0.5,
        save=True,
        project="output",
        name="detectedObjects_#1",
        classes=clases_a_detectar,
        tracker="bytetrack.yaml",
        persist=True,
    )

    for frame_idx, frame in enumerate(results):
        for obj in frame.boxes:
            track_id = int(obj.id[0]) if obj.id is not None else None
            class_id = int(obj.cls[0])
            conf = float(obj.conf[0])
            x, y, w, h = map(int, obj.xywh[0])
            
            # Registrar detección
            if track_id is not None:
                f.write(f"{frame_idx} | {track_id} | {model.names[class_id]} | {conf:.2f} | ({x},{y},{w},{h})\n")
                frame_counts[frame_idx][class_id] += 1
                if track_id not in objetos_unicos:
                    objetos_unicos.add(track_id)
                    contador_clases[class_id] += 1

# Procesar información de la consola para extraer tiempos de procesamiento
console_file = "salidaconsola.txt"
if os.path.exists(console_file) and os.path.getsize(console_file) > 0:
    with open(console_file, "r") as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) > 5 and "frame" in parts[1]:
                try:
                    frame_number = int(parts[2].split("/")[0])
                    tiempo_procesamiento = float(parts[-1].replace("ms", ""))
                    procesamiento_tiempos[frame_number] = tiempo_procesamiento
                except ValueError:
                    continue  # Ignorar líneas mal formateadas

# Evitar división por cero
if procesamiento_tiempos:
    tiempo_promedio = sum(procesamiento_tiempos.values()) / len(procesamiento_tiempos)
else:
    tiempo_promedio = 0

print("\n✅ Datos guardados en 'detecciones_mejorado.txt' ")